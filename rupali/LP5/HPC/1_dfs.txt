#include <iostream>
#include <vector>
#include <stack>
#include <omp.h>
using namespace std;

const int MAX = 100000;
vector<int> graph[MAX];
bool visited[MAX];

// DFS using stack (left subtree visited before right)
void dfs(int start) {
    stack<int> s;
    s.push(start);

    while (!s.empty()) {
        int curr_node;

        #pragma omp critical
        {
            curr_node = s.top();
            s.pop();
        }

        if (!visited[curr_node]) {
            #pragma omp critical
            visited[curr_node] = true;

            cout << curr_node << " ";

            // Push right-to-left so left is processed first (LIFO stack)
            #pragma omp parallel for
            for (int i = graph[curr_node].size() - 1; i >= 0; i--) {
                int adj_node = graph[curr_node][i];
                if (!visited[adj_node]) {
                    #pragma omp critical
                    s.push(adj_node);
                }
            }
        }
    }
}

int main() 
{
    int n, m, start_node;

    // User input
    cout << "Enter number of nodes, edges and the start node:\n";
    cin >> n >> m >> start_node;

    cout << "Enter pairs of edges:\n";
    for (int i = 0; i < m; i++) {
        int u, v;
        cin >> u >> v;
        graph[u].push_back(v);
        graph[v].push_back(u); // undirected graph
    }

    // Parallel initialization of visited array
    #pragma omp parallel for
    for (int i = 0; i < n; i++) {
        visited[i] = false;
    }

    cout << "DFS traversal:\n";
    dfs(start_node);

    return 0;
}

/*
 Sample Input:
Enter number of nodes, edges and the start node:
6 5 0
Enter pairs of edges:
0 1
0 2
1 3
1 4
2 5

Graph:
       0
      / \
     1   2
    / \    \
   3   4    5

Expected DFS Traversal (Left-to-Right):
0 1 3 4 2 5
*/

