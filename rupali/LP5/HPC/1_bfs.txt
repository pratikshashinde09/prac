#include <iostream>
#include <queue>
using namespace std;

// Node definition
class Node {
public:
    int data;
    Node* left;
    Node* right;

    Node(int val) {
        data = val;
        left = right = nullptr;
    }
};

class BST {
public:
    Node* insert(Node* root, int data);  // BST insertion
    void bfs(Node* root);                // Level-order traversal (BFS)
};

// Insert node following Binary Search Tree rules
Node* BST::insert(Node* root, int data) {
    if (!root)
        return new Node(data);

    if (data < root->data)
        root->left = insert(root->left, data);
    else
        root->right = insert(root->right, data);

    return root;
}

// BFS traversal (Level-order)
void BST::bfs(Node* root) {
    if (!root) {
        cout << "Tree is empty.\n";
        return;
    }

    queue<Node*> q;
    q.push(root);

    cout << "\nBFS (Level-order) traversal:\n";
    while (!q.empty()) {
        Node* current = q.front();
        q.pop();

        cout << current->data << " ";

        if (current->left)
            q.push(current->left);
        if (current->right)
            q.push(current->right);
    }

    cout << endl;
}

int main() {
    Node* root = nullptr;
    BST bstTree;
    int data;
    char ans;

    cout << "=== Binary Search Tree Insertion ===\n";
    do {
        cout << "Enter data => ";
        cin >> data;
        root = bstTree.insert(root, data);
        cout << "Do you want to insert one more node? (y/n): ";
        cin >> ans;
    } while (ans == 'y' || ans == 'Y');

    bstTree.bfs(root);

    return 0;
}


