#include <stdio.h>
#include <stdlib.h>
#include <omp.h>

int main() {
    int N;

    // Input matrix size
    printf("Enter matrix size (N for NxN): ");
    scanf("%d", &N);

    float *m1 = (float*)malloc(N * N * sizeof(float));
    float *m2 = (float*)malloc(N * N * sizeof(float));
    float *res = (float*)malloc(N * N * sizeof(float));

    // Input elements of matrix A
    printf("Enter elements of matrix A (%d x %d):\n", N, N);
    for (int i = 0; i < N * N; i++) {
        scanf("%f", &m1[i]);
    }

    // Input elements of matrix B
    printf("Enter elements of matrix B (%d x %d):\n", N, N);
    for (int i = 0; i < N * N; i++) {
        scanf("%f", &m2[i]);
    }

    // Matrix Multiplication using OpenMP
    #pragma omp parallel for collapse(2)
    for (int row = 0; row < N; row++) {
        for (int col = 0; col < N; col++) {
            float sum = 0.0f;
            for (int k = 0; k < N; k++) {
                sum += m1[row * N + k] * m2[k * N + col];
            }
            res[row * N + col] = sum;
        }
    }

    // Output result
    printf("Matrix Multiplication Result:\n");
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            printf("res[%d][%d] = %f\n", i, j, res[i * N + j]);
        }
        printf("\n");
    }

    // Free allocated memory
    free(m1);
    free(m2);
    free(res);

    return 0;
}
