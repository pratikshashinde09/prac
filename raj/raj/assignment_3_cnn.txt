# Import required libraries
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras import layers, models
import numpy as np
from tensorflow.keras.datasets import fashion_mnist

# Load the dataset
(x_train,y_train) , (x_test, y_test)= fashion_mnist.load_data()

#x_train[0] #pixels related to one image

x_train.shape # Here 60000 is number of images, each image is of 28 x 28

# Traning data to be predicted
y_train

y_train.shape

# Plot the image to check
plt.figure(figsize=(15,2))
plt.imshow(x_train[1]) #just to see how image looks like

# Get classnames
class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress',
               'Coat','Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']

# See the image and the expected results
plt.figure(figsize=(15,2))
plt.imshow(x_train[1])
plt.xlabel(class_names[y_train[1]])

# Reshape Image data
x_train= x_train.reshape(-1,28,28,1)
x_test= x_test.reshape(-1,28,28,1)

x_train=x_train /255.0
x_test=x_test /255.0

# x_train[1]

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, Dropout, BatchNormalization
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import TensorBoard

cnn_model = Sequential()
cnn_model.add(Conv2D(filters=32, kernel_size=(3, 3), input_shape=(28,28,1), activation='relu', padding='same'))
cnn_model.add(BatchNormalization())
cnn_model.add(Conv2D(filters=32, kernel_size=(3, 3), input_shape=(28,28,1), activation='relu', padding='same'))
cnn_model.add(BatchNormalization())
cnn_model.add(MaxPooling2D(pool_size=(2, 2)))
cnn_model.add(Dropout(0.2))

cnn_model.add(Conv2D(filters=64, kernel_size=(3, 3), input_shape=(28,28,1), activation='relu', padding='same'))
cnn_model.add(BatchNormalization())
cnn_model.add(Conv2D(filters=64, kernel_size=(3, 3), input_shape=(28,28,1), activation='relu', padding='same'))
cnn_model.add(BatchNormalization())
cnn_model.add(MaxPooling2D(pool_size=(2, 2)))
cnn_model.add(Dropout(0.2))

cnn_model.add(MaxPooling2D(pool_size=(2, 2)))
cnn_model.add(Dropout(0.25))
cnn_model.add(Flatten())
cnn_model.add(Dense(units=128, activation='relu'))
cnn_model.add(Dropout(0.2))
cnn_model.add(Dense(units=10, activation='softmax'))

METRICS = [
    'accuracy',
    tf.keras.metrics.Precision(name='precision'),
    tf.keras.metrics.Recall(name='recall')
]

cnn_model.compile(loss ='sparse_categorical_crossentropy', optimizer='adam' ,metrics=['accuracy'])

cnn_model.summary()

epochs = 10
batch_size = 512

history = cnn_model.fit(
    x_train, y_train,
    batch_size=batch_size,
    epochs=epochs,
    verbose=1,
    validation_data=(x_test, y_test)
)

# epoch is the number of times an algorithm passes through a training dataset
# batch size is the number of training examples used in one iteration of model training

loss,accuracy=cnn_model.evaluate(x_test,y_test)
print("Accuracy :" ,accuracy*100,"%")

# some predictions

y_predict=cnn_model.predict(x_test)

y_predict[0]

y_pred=y_predict.argmax(axis=-1)

y_pred[0]

for i in range(5):
    plt.subplot(1,5,i+1) # 1 row and 5 columns
    plt.imshow(x_test[i])
    plt.title(class_names[y_pred[i]])

from sklearn.metrics import classification_report
print(classification_report(y_test,y_pred))